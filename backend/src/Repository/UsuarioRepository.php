<?php

namespace App\Repository;

use Exception;
use Doctrine\ORM\QueryBuilder;
use Doctrine\ORM\Query\Expr\Join;
use App\Entity\Usuario;
use App\Entity\UsuarioBiometria;
use App\Entity\UsuarioEndereco;
use App\Entity\UsuarioTelefone;
use App\Entity\UsuarioToken;
use Psr\Container\ContainerInterface;

/**
 * UsuarioRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UsuarioRepository extends Repository 
{
/**
     * Mapeamento da variável utilizada no front end com a coluna usada
     * no banco de dados
     *
     * @var array
     */
    public $cols = [
        'nomeUsuario' => 'u.descNome',
        'numrCpf' => 'u.numrCpf',
        'emailUsuario' => 'u.descEmail',
        'enderecoCidade' => 'e.descCidade',
        'idUsuario' => 'u.idUsuario'
    ];
    
    /**
     * Define a paginação da consulta
     *
     * @param QueryBuilder $queryBuilder
     * @param array $params
     * @return void
     */
    private function setPagination(&$queryBuilder, $params, $hasPagination)
    {
        if(!empty($params) && isset($params['offset']) && $hasPagination === true) {
            $pagesize = $params['limit'] ?? 9;
            $queryBuilder->setFirstResult($params['offset']);
            $queryBuilder->setMaxResults($pagesize);
        }
    }
    
    /**
     * Define a ordenação da consulta
     *
     * @param QueryBuilder $queryBuilder
     * @param array $params
     * @return void
     */
    private function setOrderBy(&$queryBuilder, $params)
    {
        if (!empty($params['sortDataField']) && !empty($params['sortOrder'])) {
            $queryBuilder->orderBy($this->cols[$params['sortDataField']], $params['sortOrder']);
        } else {
            $queryBuilder->orderBy('u.descNome', 'ASC');
        }
    }

    /**
     * Define um GroupBy na consulta
     *
     * @param QueryBuilder $queryBuilder
     * @param array $arrGroupBy
     * @return void
     */
    private function setGroupBy(&$queryBuilder, $arrGroupBy)
    {
        if(!empty($arrGroupBy) && count($arrGroupBy) > 0) {
            $queryBuilder->groupBy(implode(',', $arrGroupBy));
        }
    }

    /**
     * Define os filtros da consulta
     *
     * @param ContainerInterface $container
     * @param QueryBuilder $queryBuilder
     * @param array $filters
     * @return void
     */
    private function setFilters($container, &$queryBuilder, $filters)
    {
        if(!empty($filters) && count($filters) > 0) {
            foreach($filters as $filter => $value) {
                if(!empty($value)) {
                    switch($filter) {
                        case 'numrCpf':
                            $queryBuilder->andWhere($this->cols[$filter] . " like  '%{$container->utilService->limpaCpfCpnj($value)}%' ");
                            break;
                        case 'nomeUsuario':
                        case 'emailUsuario':
                        case 'enderecoCidade':
                            $queryBuilder->andWhere($this->cols[$filter] . " like  '%{$value}%' ");
                            break;
                        default:
                            if(isset($this->cols[$filter])) {
                                $queryBuilder->andWhere($this->cols[$filter] . " = :{$filter}");
                                $queryBuilder->setParameter($filter, $value);
                            }
                    }
                }
            }
        }
    }

    /**
     * Obtém o total de linhas da consulta
     *
     * @param ContainerInterface $container
     * @param array $params
     * @return integer
     */
    private function getTotalRows($container, $params)
    {
        $qbCount = $this->createQueryBuilder('u')->select('count(u) as total');        
        $qbCount->leftJoin(UsuarioBiometria::class, 'b', Join::WITH, "b.usuario = u.idUsuario");
        $qbCount->leftJoin(UsuarioEndereco::class, 'e', Join::WITH, "e.usuario = u.idUsuario");
        $qbCount->leftJoin(UsuarioTelefone::class, 't', Join::WITH, "t.usuario = u.idUsuario");
        $qbCount->leftJoin(UsuarioToken::class, 'k', Join::WITH, "k.usuario = u.idUsuario");


        $this->setFilters($container, $qbCount, $params);
        $resultCount = $qbCount->getQuery()->getSingleResult();

        return (int) $resultCount['total'];
    }

    /**
     * Realiza uma consulta conforme parâmetros de entrada
     *
     * @param ContainerInterface $container
     * @param array $params
     * @return array $retorno
     */
    public function getBy($container, $params = [], $hasTotalRows = true, $hasPagination = true, $arrGroupBy = [])
    {
        $retorno = [
            'rows' => [],
            'totalRows' => 0,
            'msg' => '',
            'classMsg' => '',
        ];

        // Obtém o total de registros da consulta
        if($hasTotalRows === true) {
            $retorno['totalRows'] = $this->getTotalRows($container, $params);
        }
        
        $qb = $this->createQueryBuilder('u');
        $qb->leftJoin(UsuarioBiometria::class, 'b', Join::WITH, "b.usuario = u.idUsuario");
        $qb->leftJoin(UsuarioEndereco::class, 'e', Join::WITH, "e.usuario = u.idUsuario");
        $qb->leftJoin(UsuarioTelefone::class, 't', Join::WITH, "t.usuario = u.idUsuario");
        $qb->leftJoin(UsuarioToken::class, 'k', Join::WITH, "k.usuario = u.idUsuario");

        $this->setFilters($container, $qb, $params);

        // Paginação
        $this->setPagination($qb, $params, $hasPagination);

        // Ordenação
        $this->setOrderBy($qb, $params);

        // Agrupar pesquisa
        $this->setGroupBy($qb, $arrGroupBy);
        
        $result = $qb->getQuery()->getResult();
        if (count($result) > 0) {
            /** @var Usuario $user */
            foreach ($result as $user) {
                $retorno['rows'][] = [
                    'idUsuario' => $user->getIdUsuario(),
                    'nomeUsuario' => $user->getDescNome(),
                    'numrCpf' => $user->getNumrCpf(),
                    'emailUsuario' => $user->getDescEmail(),
                    'dataNascimento' => !empty($user->getDataNascimento()) ? $user->getDataNascimento()->format('d/m/Y') : null,
                    'enderecoRua' => !empty($user->getEnderecos()) && !empty($user->getEnderecos()[0]) ? $user->getEnderecos()[0]->getDescRua() : null,
                    'enderecoNumero' => !empty($user->getEnderecos()) && !empty($user->getEnderecos()[0]) ? $user->getEnderecos()[0]->getNumrEndereco() : null,
                    'enderecoComplemento' => !empty($user->getEnderecos()) && !empty($user->getEnderecos()[0]) ? $user->getEnderecos()[0]->getDescComplemento() : null,
                    'enderecoBairro' => !empty($user->getEnderecos()) && !empty($user->getEnderecos()[0]) ? $user->getEnderecos()[0]->getDescBairro() : null,
                    'enderecoCidade' => !empty($user->getEnderecos()) && !empty($user->getEnderecos()[0]) ? $user->getEnderecos()[0]->getDescCidade() : null,
                    'enderecoUf' => !empty($user->getEnderecos()) && !empty($user->getEnderecos()[0]) ? $user->getEnderecos()[0]->getDescUf() : null,
                    'telefonePrincipal' => !empty($user->getTelefonePrincipal()) && !empty($user->getTelefonePrincipal()[0]) ? $user->getTelefonePrincipal()[0]->getDescTelefone() : null,
                    'telefoneOutro' => !empty($user->getTelefoneOutro()) && !empty($user->getTelefoneOutro()[0]) ? $user->getTelefoneOutro()[0]->getDescTelefone() : null,
                ];
            }
        }
        return $retorno;
    }
}